// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  startedAt   DateTime @map("started_at") @db.Date
  plannedEnd  DateTime @map("planned_end") @db.Date
  description String
  startedBy   String   @map("started_by")
  tasks       Task[]

  @@map("project")
}

model Task {
  id        Int              @id @default(autoincrement())
  title     String
  priority  TaskPriorityType
  status    TaskStatusType
  assigned  String
  estimated Int
  project   Project?         @relation(fields: [projectId], references: [id])
  projectId Int?             @map("project_id")

  @@map("task")
}

enum TaskPriorityType {
  Low
  Medium
  High

  @@map("task_priority")
}

enum TaskStatusType {
  ToDo
  InProgress
  Closed
  Frozen

  @@map("task_status")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
