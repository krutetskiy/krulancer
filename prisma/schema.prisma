// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  startedAt   DateTime @map("started_at") @db.Date
  plannedEnd  DateTime @map("planned_end") @db.Date
  description String
  startedBy   String   @map("started_by")
  tasks       Task[]

  @@map("project")
}

model Task {
  id        Int              @id @default(autoincrement())
  title     String
  priority  TaskPriorityType
  status    TaskStatusType
  assigned  String
  estimated Int
  project   Project?         @relation(fields: [projectId], references: [id])
  projectId Int?             @map("project_id")

  @@map("task")
}

enum TaskPriorityType {
  Low
  Medium
  High

  @@map("task_priority")
}

enum TaskStatusType {
  ToDo
  InProgress
  Closed
  Frozen

  @@map("task_status")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  userId        String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
